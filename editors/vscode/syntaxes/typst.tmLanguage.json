{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "typst",
    "patterns": [
        {
            "include": "#markup"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.typst",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ]
                },
                {
                    "name": "comment.line.double-slash.typst",
                    "begin": "(?<!:)//",
                    "end": "\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "common": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#fenced_code_block"
                }
            ]
        },
        "markup": {
            "patterns": [
                {
                    "include": "#common"
                },
                {
                    "name": "constant.character.escape.content.typst",
                    "match": "\\\\([\\\\/\\[\\]{}#*_=~`$-.]|u\\{[0-9a-zA-Z]*\\}?)"
                },
                {
                    "name": "punctuation.definition.linebreak.typst",
                    "match": "\\\\"
                },
                {
                    "name": "punctuation.definition.nonbreaking-space.typst",
                    "match": "~"
                },
                {
                    "name": "punctuation.definition.shy.typst",
                    "match": "-\\?"
                },
                {
                    "name": "punctuation.definition.em-dash.typst",
                    "match": "---"
                },
                {
                    "name": "punctuation.definition.en-dash.typst",
                    "match": "--"
                },
                {
                    "name": "punctuation.definition.ellipsis.typst",
                    "match": "\\.\\.\\."
                },
                {
                    "name": "constant.symbol.typst",
                    "match": ":([a-zA-Z0-9]+:)+"
                },
                {
                    "name": "markup.bold.typst",
                    "begin": "(^\\*|\\*$|((?<=\\W|_)\\*)|(\\*(?=\\W|_)))",
                    "end": "(^\\*|\\*$|((?<=\\W|_)\\*)|(\\*(?=\\W|_)))|\n|(?=\\])",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.bold.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#markup"
                        }
                    ]
                },
                {
                    "name": "markup.italic.typst",
                    "begin": "(^_|_$|((?<=\\W|_)_)|(_(?=\\W|_)))",
                    "end": "(^_|_$|((?<=\\W|_)_)|(_(?=\\W|_)))|\n|(?=\\])",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.italic.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#markup"
                        }
                    ]
                },
                {
                    "name": "markup.underline.link.typst",
                    "match": "https?://[0-9a-zA-Z~/%#&=',;\\.\\+\\?]*"
                },
                {
                    "name": "markup.raw.inline.typst",
                    "begin": "`",
                    "end": "`",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.raw.typst"
                        }
                    }
                },
                {
                    "name": "string.other.math.typst",
                    "begin": "\\$",
                    "end": "\\$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.math.typst"
                        }
                    }
                },
                {
                    "name": "markup.heading.typst",
                    "contentName": "entity.name.section.typst",
                    "begin": "^\\s*=+\\s+",
                    "end": "\n|(?=<)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.heading.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#markup"
                        }
                    ]
                },
                {
                    "name": "punctuation.definition.list.unnumbered.typst",
                    "match": "^\\s*-\\s+"
                },
                {
                    "name": "punctuation.definition.list.numbered.typst",
                    "match": "^\\s*([0-9]*\\.|\\+)\\s+"
                },
                {
                    "match": "^\\s*(/)\\s+([^:]*:)",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.list.description.typst"
                        },
                        "2": {
                            "name": "markup.list.term.typst"
                        }
                    }
                },
                {
                    "name": "entity.other.label.typst",
                    "match": "<[[:alpha:]_][[:alnum:]_-]*>",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.label.typst"
                        }
                    }
                },
                {
                    "name": "entity.other.reference.typst",
                    "match": "(@)[[:alpha:]_][[:alnum:]_-]*",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.reference.typst"
                        }
                    }
                },
                {
                    "begin": "(#)(let|set|show)\\b",
                    "end": "\n|(;)|(?=])",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.other.typst"
                        },
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.statement.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                },
                {
                    "name": "keyword.other.typst",
                    "match": "(#)(as|in)\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    }
                },
                {
                    "begin": "(?:(#)if|(?:}(?:\\s*)|](?:\\s*))else)\\b",
                    "end": "\n|(?=])|(?<=}|])",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.typst"
                        },
                        "2": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                },
                {
                    "begin": "(#)(for|while)\\b",
                    "end": "\n|(?=])|(?<=}|])",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.typst"
                        },
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                },
                {
                    "name": "keyword.control.loop.typst",
                    "match": "(#)(break|continue)\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    }
                },
                {
                    "begin": "(#)(import|include|export)\\b",
                    "end": "\n|(;)|(?=])",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.import.typst"
                        },
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.statement.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                },
                {
                    "name": "keyword.control.flow.typst",
                    "match": "(#)(return)\\b",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.keyword.typst"
                        }
                    }
                },
                {
                    "comment": "Function name",
                    "name": "entity.name.function.typst",
                    "match": "((#)[[:alpha:]_][[:alnum:]_-]*!?)(?=\\[|\\()",
                    "captures": {
                        "2": {
                            "name": "punctuation.definition.function.typst"
                        }
                    }
                },
                {
                    "comment": "Function arguments",
                    "begin": "(?:#)([[A-Za-z]_][[0-9]_-]*!?(?=\\())\\(",
                    "end": "\\)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.group.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#arguments"
                        }
                    ]
                },
                {
                    "name": "entity.other.interpolated.typst",
                    "match": "(#)[[:alpha:]_][.[:alnum:]_-]*",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.typst"
                        }
                    }
                },
                {
                    "name": "meta.block.content.typst",
                    "begin": "#",
                    "end": "\\s",
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                }
            ]
        },
        "code": {
            "patterns": [
                {
                    "include": "#common"
                },
                {
                    "name": "meta.block.code.typst",
                    "begin": "{",
                    "end": "}",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.block.code.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                },
                {
                    "name": "meta.block.content.typst",
                    "begin": "\\[",
                    "end": "\\]",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.block.content.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#markup"
                        }
                    ]
                },
                {
                    "name": "comment.line.double-slash.typst",
                    "begin": "//",
                    "end": "\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.typst"
                        }
                    }
                },
                {
                    "name": "punctuation.separator.colon.typst",
                    "match": ":"
                },
                {
                    "name": "punctuation.separator.comma.typst",
                    "match": ","
                },
                {
                    "name": "keyword.operator.typst",
                    "match": "=>|\\.\\."
                },
                {
                    "name": "keyword.operator.relational.typst",
                    "match": "==|!=|<=|<|>=|>"
                },
                {
                    "name": "keyword.operator.assignment.typst",
                    "match": "\\+=|-=|\\*=|/=|="
                },
                {
                    "name": "keyword.operator.arithmetic.typst",
                    "match": "\\+|\\|/|(?<![[:alpha:]])(?<!\\w)(?<!\\d)-(?![[:alnum:]-][[:alpha:]_])"
                },
                {
                    "name": "keyword.operator.word.typst",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "keyword.other.typst",
                    "match": "\\b(let|as|in|set|show)\\b"
                },
                {
                    "name": "keyword.control.conditional.typst",
                    "match": "\\b(if|else)\\b"
                },
                {
                    "name": "keyword.control.loop.typst",
                    "match": "\\b(for|while|break|continue)\\b"
                },
                {
                    "name": "keyword.control.import.typst",
                    "match": "\\b(import|include|export)\\b"
                },
                {
                    "name": "keyword.control.flow.typst",
                    "match": "\\b(return)\\b"
                },
                {
                    "include": "#constants"
                },
                {
                    "comment": "Function name",
                    "name": "entity.name.function.typst",
                    "match": "\\b[[:alpha:]_][[:alnum:]_-]*!?(?=\\[|\\()"
                },
                {
                    "comment": "Function name",
                    "name": "entity.name.function.typst",
                    "match": "(?:\\bshow\\s*\\b([[:alpha:]][[:alnum:]-])(?=\\s[:.]))"
                },
                {
                    "comment": "Function arguments",
                    "begin": "(?:\\b([[:alpha:]][[:alnum:]-]*!?)\\()",
                    "end": "\\)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.group.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#arguments"
                        }
                    ]
                },
                {
                    "name": "variable.other.typst",
                    "match": "\\b[[:alpha:]_][[:alnum:]_-]*\\b"
                },
                {
                    "name": "meta.group.typst",
                    "begin": "\\(",
                    "end": "\\)|(?=;)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.group.typst"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code"
                        }
                    ]
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.none.typst",
                    "match": "\\bnone\\b"
                },
                {
                    "name": "constant.language.auto.typst",
                    "match": "\\bauto\\b"
                },
                {
                    "name": "constant.language.boolean.typst",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.numeric.length.typst",
                    "match": "\\b(\\d*)?\\.?\\d+([eE][+-]?\\d+)?(mm|pt|cm|in|em)\\b"
                },
                {
                    "name": "constant.numeric.angle.typst",
                    "match": "\\b(\\d*)?\\.?\\d+([eE][+-]?\\d+)?(rad|deg)\\b"
                },
                {
                    "name": "constant.numeric.percentage.typst",
                    "match": "\\b(\\d*)?\\.?\\d+([eE][+-]?\\d+)?%"
                },
                {
                    "name": "constant.numeric.fr.typst",
                    "match": "\\b(\\d*)?\\.?\\d+([eE][+-]?\\d+)?fr"
                },
                {
                    "name": "constant.numeric.integer.typst",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.float.typst",
                    "match": "\\b(\\d*)?\\.?\\d+([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "string.quoted.double.typst",
                    "begin": "\"",
                    "end": "\"",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.typst"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.string.typst",
                            "match": "\\\\([\\\\\"nrt]|u\\{?[0-9a-zA-Z]*\\}?)"
                        }
                    ]
                },
                {
                    "name": "string.other.math.typst",
                    "begin": "\\$",
                    "end": "\\$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.string.math.typst"
                        }
                    }
                }
            ]
        },
        "arguments": {
            "patterns": [
                {
                    "name": "variable.parameter.typst",
                    "match": "\\b[[:alpha:]_][[:alnum:]_-]*(?=:)"
                },
                {
                    "include": "#code"
                }
            ]
        },
        "fenced_code_block_typst": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(typ|typst)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.typst",
                    "patterns": [
                        {
                            "include": "source.typst"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_css": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(css|css.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.css",
                    "patterns": [
                        {
                            "include": "source.css"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_basic": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.html",
                    "patterns": [
                        {
                            "include": "text.html.basic"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_ini": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(ini|conf)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.ini",
                    "patterns": [
                        {
                            "include": "source.ini"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_java": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(java|bsh)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.java",
                    "patterns": [
                        {
                            "include": "source.java"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_lua": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(lua)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.lua",
                    "patterns": [
                        {
                            "include": "source.lua"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_makefile": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.makefile",
                    "patterns": [
                        {
                            "include": "source.makefile"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_perl": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.perl",
                    "patterns": [
                        {
                            "include": "source.perl"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_r": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(R|r|s|S|Rprofile|\\{\\.r.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.r",
                    "patterns": [
                        {
                            "include": "source.r"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_ruby": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.ruby",
                    "patterns": [
                        {
                            "include": "source.ruby"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_php": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.php",
                    "patterns": [
                        {
                            "include": "text.html.basic"
                        },
                        {
                            "include": "source.php"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_sql": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(sql|ddl|dml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.sql",
                    "patterns": [
                        {
                            "include": "source.sql"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_vs_net": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(vb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.vs_net",
                    "patterns": [
                        {
                            "include": "source.asp.vb.net"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_xml": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.xml",
                    "patterns": [
                        {
                            "include": "text.xml"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_xsl": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(xsl|xslt)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.xsl",
                    "patterns": [
                        {
                            "include": "text.xml.xsl"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_yaml": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(yaml|yml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.yaml",
                    "patterns": [
                        {
                            "include": "source.yaml"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_dosbatch": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(bat|batch)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.dosbatch",
                    "patterns": [
                        {
                            "include": "source.batchfile"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_clojure": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(clj|cljs|clojure)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.clojure",
                    "patterns": [
                        {
                            "include": "source.clojure"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_coffee": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(coffee|Cakefile|coffee.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.coffee",
                    "patterns": [
                        {
                            "include": "source.coffee"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_c": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(c|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.c",
                    "patterns": [
                        {
                            "include": "source.c"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_cpp": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(cpp|c\\+\\+|cxx)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.cpp source.cpp",
                    "patterns": [
                        {
                            "include": "source.cpp"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_diff": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(patch|diff|rej)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.diff",
                    "patterns": [
                        {
                            "include": "source.diff"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_dockerfile": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(dockerfile|Dockerfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.dockerfile",
                    "patterns": [
                        {
                            "include": "source.dockerfile"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_git_commit": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(COMMIT_EDITMSG|MERGE_MSG)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.git_commit",
                    "patterns": [
                        {
                            "include": "text.git-commit"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_git_rebase": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(git-rebase-todo)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.git_rebase",
                    "patterns": [
                        {
                            "include": "text.git-rebase"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_go": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(go|golang)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.go",
                    "patterns": [
                        {
                            "include": "source.go"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_groovy": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(groovy|gvy)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.groovy",
                    "patterns": [
                        {
                            "include": "source.groovy"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_pug": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(jade|pug)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.pug",
                    "patterns": [
                        {
                            "include": "text.pug"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_js": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(js|jsx|javascript|es6|mjs|cjs|dataviewjs|\\{\\.js.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.javascript",
                    "patterns": [
                        {
                            "include": "source.js"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_js_regexp": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(regexp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.js_regexp",
                    "patterns": [
                        {
                            "include": "source.js.regexp"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_json": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.json",
                    "patterns": [
                        {
                            "include": "source.json"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_jsonc": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(jsonc)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.jsonc",
                    "patterns": [
                        {
                            "include": "source.json.comments"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_less": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(less)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.less",
                    "patterns": [
                        {
                            "include": "source.css.less"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_objc": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.objc",
                    "patterns": [
                        {
                            "include": "source.objc"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_swift": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(swift)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.swift",
                    "patterns": [
                        {
                            "include": "source.swift"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_scss": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(scss)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.scss",
                    "patterns": [
                        {
                            "include": "source.css.scss"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_perl6": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(perl6|p6|pl6|pm6|nqp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.perl6",
                    "patterns": [
                        {
                            "include": "source.perl.6"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_powershell": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(powershell|ps1|psm1|psd1)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.powershell",
                    "patterns": [
                        {
                            "include": "source.powershell"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_python": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\\{\\.python.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.python",
                    "patterns": [
                        {
                            "include": "source.python"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_julia": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(julia|\\{\\.julia.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.julia",
                    "patterns": [
                        {
                            "include": "source.julia"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_regexp_python": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(re)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.regexp_python",
                    "patterns": [
                        {
                            "include": "source.regexp.python"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_rust": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(rust|rs|\\{\\.rust.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.rust",
                    "patterns": [
                        {
                            "include": "source.rust"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_scala": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(scala|sbt)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.scala",
                    "patterns": [
                        {
                            "include": "source.scala"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_shell": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\\{\\.bash.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.shellscript",
                    "patterns": [
                        {
                            "include": "source.shell"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_ts": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(typescript|ts)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.typescript",
                    "patterns": [
                        {
                            "include": "source.ts"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_tsx": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(tsx)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.typescriptreact",
                    "patterns": [
                        {
                            "include": "source.tsx"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_csharp": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(cs|csharp|c#)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.csharp",
                    "patterns": [
                        {
                            "include": "source.cs"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_fsharp": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(fs|fsharp|f#)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.fsharp",
                    "patterns": [
                        {
                            "include": "source.fsharp"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_dart": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(dart)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.dart",
                    "patterns": [
                        {
                            "include": "source.dart"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_handlebars": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(handlebars|hbs)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.handlebars",
                    "patterns": [
                        {
                            "include": "text.html.handlebars"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_markdown": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(markdown|md)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.markdown",
                    "patterns": [
                        {
                            "include": "text.html.markdown"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_log": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(log)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.log",
                    "patterns": [
                        {
                            "include": "text.log"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_erlang": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(erlang)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.erlang",
                    "patterns": [
                        {
                            "include": "source.erlang"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_elixir": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(elixir)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.elixir",
                    "patterns": [
                        {
                            "include": "source.elixir"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_latex": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(latex|tex)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.latex",
                    "patterns": [
                        {
                            "include": "text.tex.latex"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_bibtex": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(bibtex)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.bibtex",
                    "patterns": [
                        {
                            "include": "text.bibtex"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block_twig": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?i:(twig)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
            "name": "markup.raw.block.typst",
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language.typst"
                },
                "5": {
                    "name": "fenced_code.block.language.attributes.typst"
                }
            },
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "patterns": [
                {
                    "begin": "(^|\\G)(\\s*)(.*)",
                    "while": "(^|\\G)(?!\\s*([`~]{3,})\\s*$)",
                    "contentName": "meta.embedded.block.twig",
                    "patterns": [
                        {
                            "include": "source.twig"
                        }
                    ]
                }
            ]
        },
        "fenced_code_block": {
            "patterns": [
                {
                    "include": "#fenced_code_block_typst"
                },
                {
                    "include": "#fenced_code_block_css"
                },
                {
                    "include": "#fenced_code_block_basic"
                },
                {
                    "include": "#fenced_code_block_ini"
                },
                {
                    "include": "#fenced_code_block_java"
                },
                {
                    "include": "#fenced_code_block_lua"
                },
                {
                    "include": "#fenced_code_block_makefile"
                },
                {
                    "include": "#fenced_code_block_perl"
                },
                {
                    "include": "#fenced_code_block_r"
                },
                {
                    "include": "#fenced_code_block_ruby"
                },
                {
                    "include": "#fenced_code_block_php"
                },
                {
                    "include": "#fenced_code_block_sql"
                },
                {
                    "include": "#fenced_code_block_vs_net"
                },
                {
                    "include": "#fenced_code_block_xml"
                },
                {
                    "include": "#fenced_code_block_xsl"
                },
                {
                    "include": "#fenced_code_block_yaml"
                },
                {
                    "include": "#fenced_code_block_dosbatch"
                },
                {
                    "include": "#fenced_code_block_clojure"
                },
                {
                    "include": "#fenced_code_block_coffee"
                },
                {
                    "include": "#fenced_code_block_c"
                },
                {
                    "include": "#fenced_code_block_cpp"
                },
                {
                    "include": "#fenced_code_block_diff"
                },
                {
                    "include": "#fenced_code_block_dockerfile"
                },
                {
                    "include": "#fenced_code_block_git_commit"
                },
                {
                    "include": "#fenced_code_block_git_rebase"
                },
                {
                    "include": "#fenced_code_block_go"
                },
                {
                    "include": "#fenced_code_block_groovy"
                },
                {
                    "include": "#fenced_code_block_pug"
                },
                {
                    "include": "#fenced_code_block_js"
                },
                {
                    "include": "#fenced_code_block_js_regexp"
                },
                {
                    "include": "#fenced_code_block_json"
                },
                {
                    "include": "#fenced_code_block_jsonc"
                },
                {
                    "include": "#fenced_code_block_less"
                },
                {
                    "include": "#fenced_code_block_objc"
                },
                {
                    "include": "#fenced_code_block_swift"
                },
                {
                    "include": "#fenced_code_block_scss"
                },
                {
                    "include": "#fenced_code_block_perl6"
                },
                {
                    "include": "#fenced_code_block_powershell"
                },
                {
                    "include": "#fenced_code_block_python"
                },
                {
                    "include": "#fenced_code_block_julia"
                },
                {
                    "include": "#fenced_code_block_regexp_python"
                },
                {
                    "include": "#fenced_code_block_rust"
                },
                {
                    "include": "#fenced_code_block_scala"
                },
                {
                    "include": "#fenced_code_block_shell"
                },
                {
                    "include": "#fenced_code_block_ts"
                },
                {
                    "include": "#fenced_code_block_tsx"
                },
                {
                    "include": "#fenced_code_block_csharp"
                },
                {
                    "include": "#fenced_code_block_fsharp"
                },
                {
                    "include": "#fenced_code_block_dart"
                },
                {
                    "include": "#fenced_code_block_handlebars"
                },
                {
                    "include": "#fenced_code_block_markdown"
                },
                {
                    "include": "#fenced_code_block_log"
                },
                {
                    "include": "#fenced_code_block_erlang"
                },
                {
                    "include": "#fenced_code_block_elixir"
                },
                {
                    "include": "#fenced_code_block_latex"
                },
                {
                    "include": "#fenced_code_block_bibtex"
                },
                {
                    "include": "#fenced_code_block_twig"
                },
                {
                    "include": "#fenced_code_block_unknown"
                }
            ]
        },
        "fenced_code_block_unknown": {
            "begin": "(^|\\G)(\\s*)(`{3,})\\s*(?=([^`]*)?$)",
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                },
                "4": {
                    "name": "fenced_code.block.language"
                }
            },
            "end": "(^|\\G)(\\2|\\s{0,3})(\\3)\\s*$",
            "endCaptures": {
                "3": {
                    "name": "punctuation.definition.raw.typst"
                }
            },
            "name": "markup.raw.block.typst"
        }
    },
    "scopeName": "source.typst"
}
