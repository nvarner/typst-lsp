name: CI
on:
  push:
    tags:
      - "*"
  workflow_dispatch:

env:
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            platform: win32
            arch: x64
          - os: windows-latest
            rust-target: i686-pc-windows-msvc
            platform: win32
            arch: ia32
          - os: windows-latest
            rust-target: aarch64-pc-windows-msvc
            platform: win32
            arch: arm64
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
          - os: ubuntu-20.04
            rust-target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: ubuntu-20.04
            rust-target: arm-unknown-linux-gnueabihf
            platform: linux
            arch: armhf
          - os: macos-11
            rust-target: x86_64-apple-darwin
            platform: darwin
            arch: x64
          - os: macos-11
            rust-target: aarch64-apple-darwin
            platform: darwin
            arch: arm64

    name: build (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install
        working-directory: ./addons/vscode

      - name: rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}
      - name: Install AArch64 target toolchain
        if: matrix.rust-target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install ARM target toolchain
        if: matrix.rust-target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get install gcc-arm-linux-gnueabihf

      - shell: pwsh
        run: |
          echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
          cargo build --release -p typst-lsp --target ${{ matrix.rust-target }}
          mkdir -p addons/vscode/out
          cp "target/${{ matrix.rust-target }}/release/typst-lsp$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" "addons/vscode/out/"
          cp "target/${{ matrix.rust-target }}/release/typst-lsp$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" "typst-lsp-${{ matrix.platform }}-${{ matrix.arch }}$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )"
      - shell: pwsh
        run: npm run package -- --target ${{ env.target }} -o typst-lsp-${{ env.target }}.vsix
        working-directory: ./addons/vscode
      - uses: actions/upload-artifact@v2
        with:
          name: typst-lsp-${{ env.target }}.vsix
          path: addons/vscode/typst-lsp-${{ env.target }}.vsix
      - uses: actions/upload-artifact@v2
        with:
          name: typst-lsp-${{ env.target }}
          path: typst-lsp-${{ matrix.platform }}-${{ matrix.arch }}${{ fromJSON('["", ".exe"]')[matrix.platform == 'win32'] }}

  build_alpine:
    name: build (x86_64-unknown-linux-musl)
    runs-on: ubuntu-latest
    container:
      image: rust:alpine
      volumes:
        - /usr/local/cargo/registry:/usr/local/cargo/registry
    env:
      RUST_TARGET: x86_64-unknown-linux-musl
      RUSTFLAGS: "-C link-arg=-fuse-ld=lld -C target-feature=-crt-static"

    steps:
      - name: Install dependencies
        run: apk add --no-cache git clang lld musl-dev nodejs npm
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: build server binary
        run: |
          echo "target=alpine-x64" >> $env:GITHUB_ENV
          cargo build --release -p typst-lsp --target $RUST_TARGET
          mkdir -p addons/vscode/out
          cp "target/$RUST_TARGET/release/typst-lsp" "addons/vscode/out/"
          cp "target/$RUST_TARGET/release/typst-lsp" "typst-lsp-alpine-x64"
      - name: package extension
        run: npm run package -- --target ${{ env.target }} -o typst-lsp-${{ env.target }}.vsix
        working-directory: ./addons/vscode
      - uses: actions/upload-artifact@v2
        with:
          name: typst-lsp-${{ env.target }}.vsix
          path: addons/vscode/typst-lsp-${{ env.target }}.vsix
      - uses: actions/upload-artifact@v2
        with:
          name: typst-lsp-${{ env.target }}
          path: typst-lsp-${{ env.target }}

  build_generic:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - shell: pwsh
        run: |
          npm install
          npm run package -- -o typst-lsp-generic
        working-directory: ./addons/vscode
      - uses: actions/upload-artifact@v2
        with:
          name: typst-lsp-generic
          path: addons/vscode/typst-lsp-generic.vsix

  release:
    runs-on: ubuntu-latest
    needs: [build, build_alpine, build_generic]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "artifacts/*/*"
          allowUpdates: true

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: [build, build_generic]
  #   if: success() && startsWith(github.ref, 'refs/tags/')
  #   steps:
  #     - uses: actions/download-artifact@v2
  #     - run: npx vsce publish --packagePath $(find . -type f -iname '*.vsix')
  #       env:
  #         VSCE_PAT: ${{ secrets.VSCE_PAT }}
